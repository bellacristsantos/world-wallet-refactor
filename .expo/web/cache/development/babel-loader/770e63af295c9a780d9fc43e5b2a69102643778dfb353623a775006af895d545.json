{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { filterDOMProps as $frWMC$filterDOMProps, useId as $frWMC$useId, mergeProps as $frWMC$mergeProps, useSlotId as $frWMC$useSlotId, isMac as $frWMC$isMac, isWebKit as $frWMC$isWebKit } from \"@react-aria/utils\";\nimport { useFocusWithin as $frWMC$useFocusWithin, useHover as $frWMC$useHover, isFocusVisible as $frWMC$isFocusVisible } from \"@react-aria/interactions\";\nimport { useLabel as $frWMC$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $frWMC$useSelectableList, useSelectableItem as $frWMC$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $frWMC$getItemCount } from \"@react-stately/collections\";\nvar $b1f0cad8af73213b$export$3585ede4d035bf14 = new WeakMap();\nfunction $b1f0cad8af73213b$var$normalizeKey(key) {\n  if (typeof key === \"string\") return key.replace(/\\s*/g, \"\");\n  return \"\" + key;\n}\nfunction $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error(\"Unknown list\");\n  return `${data.id}-option-${$b1f0cad8af73213b$var$normalizeKey(itemKey)}`;\n}\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = (0, $frWMC$filterDOMProps)(props, {\n    labelable: true\n  });\n  var selectionBehavior = props.selectionBehavior || \"toggle\";\n  var linkBehavior = props.linkBehavior || (selectionBehavior === \"replace\" ? \"action\" : \"override\");\n  if (selectionBehavior === \"toggle\" && linkBehavior === \"action\") linkBehavior = \"override\";\n  var _ref = (0, $frWMC$useSelectableList)(_objectSpread(_objectSpread({}, props), {}, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys,\n      linkBehavior: linkBehavior\n    })),\n    listProps = _ref.listProps;\n  var _ref2 = (0, $frWMC$useFocusWithin)({\n      onFocusWithin: props.onFocus,\n      onBlurWithin: props.onBlur,\n      onFocusWithinChange: props.onFocusChange\n    }),\n    focusWithinProps = _ref2.focusWithinProps;\n  var id = (0, $frWMC$useId)(props.id);\n  (0, $b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior: linkBehavior\n  });\n  var _ref3 = (0, $frWMC$useLabel)(_objectSpread(_objectSpread({}, props), {}, {\n      id: id,\n      labelElementType: \"span\"\n    })),\n    labelProps = _ref3.labelProps,\n    fieldProps = _ref3.fieldProps;\n  return {\n    labelProps: labelProps,\n    listBoxProps: (0, $frWMC$mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === \"multiple\" ? {\n      \"aria-multiselectable\": \"true\"\n    } : {}, _objectSpread({\n      role: \"listbox\"\n    }, (0, $frWMC$mergeProps)(fieldProps, listProps)))\n  };\n}\nfunction $293f70390ea03370$export$497855f14858aa34(props, state, ref) {\n  var _item_props;\n  var key = props.key;\n  var data = (0, $b1f0cad8af73213b$export$3585ede4d035bf14).get(state);\n  var _props_isDisabled;\n  var isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.disabledKeys.has(key);\n  var _props_isSelected;\n  var isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);\n  var _props_shouldSelectOnPressUp;\n  var shouldSelectOnPressUp = (_props_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _props_shouldSelectOnPressUp !== void 0 ? _props_shouldSelectOnPressUp : data === null || data === void 0 ? void 0 : data.shouldSelectOnPressUp;\n  var _props_shouldFocusOnHover;\n  var shouldFocusOnHover = (_props_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _props_shouldFocusOnHover !== void 0 ? _props_shouldFocusOnHover : data === null || data === void 0 ? void 0 : data.shouldFocusOnHover;\n  var _props_shouldUseVirtualFocus;\n  var shouldUseVirtualFocus = (_props_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _props_shouldUseVirtualFocus !== void 0 ? _props_shouldUseVirtualFocus : data === null || data === void 0 ? void 0 : data.shouldUseVirtualFocus;\n  var _props_isVirtualized;\n  var isVirtualized = (_props_isVirtualized = props.isVirtualized) !== null && _props_isVirtualized !== void 0 ? _props_isVirtualized : data === null || data === void 0 ? void 0 : data.isVirtualized;\n  var labelId = (0, $frWMC$useSlotId)();\n  var descriptionId = (0, $frWMC$useSlotId)();\n  var optionProps = {\n    role: \"option\",\n    \"aria-disabled\": isDisabled || undefined,\n    \"aria-selected\": state.selectionManager.selectionMode !== \"none\" ? isSelected : undefined\n  };\n  if (!((0, $frWMC$isMac)() && (0, $frWMC$isWebKit)())) {\n    optionProps[\"aria-label\"] = props[\"aria-label\"];\n    optionProps[\"aria-labelledby\"] = labelId;\n    optionProps[\"aria-describedby\"] = descriptionId;\n  }\n  var item = state.collection.getItem(key);\n  if (isVirtualized) {\n    var index = Number(item === null || item === void 0 ? void 0 : item.index);\n    optionProps[\"aria-posinset\"] = Number.isNaN(index) ? undefined : index + 1;\n    optionProps[\"aria-setsize\"] = (0, $frWMC$getItemCount)(state.collection);\n  }\n  var _ref4 = (0, $frWMC$useSelectableItem)({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: shouldSelectOnPressUp,\n      allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n      isVirtualized: isVirtualized,\n      shouldUseVirtualFocus: shouldUseVirtualFocus,\n      isDisabled: isDisabled,\n      onAction: (data === null || data === void 0 ? void 0 : data.onAction) ? function () {\n        var _data_onAction;\n        return data === null || data === void 0 ? void 0 : (_data_onAction = data.onAction) === null || _data_onAction === void 0 ? void 0 : _data_onAction.call(data, key);\n      } : undefined,\n      linkBehavior: data === null || data === void 0 ? void 0 : data.linkBehavior\n    }),\n    itemProps = _ref4.itemProps,\n    isPressed = _ref4.isPressed,\n    isFocused = _ref4.isFocused,\n    hasAction = _ref4.hasAction,\n    allowsSelection = _ref4.allowsSelection;\n  var _ref5 = (0, $frWMC$useHover)({\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart: function onHoverStart() {\n        if (!(0, $frWMC$isFocusVisible)()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }),\n    hoverProps = _ref5.hoverProps;\n  var domProps = (0, $frWMC$filterDOMProps)(item === null || item === void 0 ? void 0 : item.props, {\n    isLink: !!(item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.href)\n  });\n  delete domProps.id;\n  return {\n    optionProps: _objectSpread(_objectSpread(_objectSpread({}, optionProps), (0, $frWMC$mergeProps)(domProps, itemProps, hoverProps)), {}, {\n      id: (0, $b1f0cad8af73213b$export$9145995848b05025)(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isFocusVisible: isFocused && (0, $frWMC$isFocusVisible)(),\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {\n  var heading = props.heading,\n    ariaLabel = props[\"aria-label\"];\n  var headingId = (0, $frWMC$useId)();\n  return {\n    itemProps: {\n      role: \"presentation\"\n    },\n    headingProps: heading ? {\n      id: headingId,\n      role: \"presentation\"\n    } : {},\n    groupProps: {\n      role: \"group\",\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": heading ? headingId : undefined\n    }\n  };\n}\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox, $293f70390ea03370$export$497855f14858aa34 as useOption, $af383d3bef1cfdc9$export$c3f9f39876e4bc7 as useListBoxSection, $b1f0cad8af73213b$export$3585ede4d035bf14 as listData, $b1f0cad8af73213b$export$9145995848b05025 as getItemId };","map":{"version":3,"names":["$b1f0cad8af73213b$export$3585ede4d035bf14","WeakMap","$b1f0cad8af73213b$var$normalizeKey","key","replace","$b1f0cad8af73213b$export$9145995848b05025","state","itemKey","data","get","Error","id","$c132121280ec012d$export$50eacbbf140a3141","props","ref","domProps","$frWMC$filterDOMProps","labelable","selectionBehavior","linkBehavior","_ref","$frWMC$useSelectableList","_objectSpread","selectionManager","collection","disabledKeys","listProps","_ref2","$frWMC$useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","focusWithinProps","$frWMC$useId","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","onAction","_ref3","$frWMC$useLabel","labelElementType","labelProps","fieldProps","listBoxProps","$frWMC$mergeProps","selectionMode","role","$293f70390ea03370$export$497855f14858aa34","_item_props","_props_isDisabled","isDisabled","has","_props_isSelected","isSelected","_props_shouldSelectOnPressUp","_props_shouldFocusOnHover","_props_shouldUseVirtualFocus","_props_isVirtualized","labelId","$frWMC$useSlotId","descriptionId","optionProps","undefined","$frWMC$isMac","$frWMC$isWebKit","item","getItem","index","Number","isNaN","$frWMC$getItemCount","_ref4","$frWMC$useSelectableItem","allowsDifferentPressOrigin","_data_onAction","call","itemProps","isPressed","isFocused","hasAction","allowsSelection","_ref5","$frWMC$useHover","onHoverStart","$frWMC$isFocusVisible","setFocused","setFocusedKey","hoverProps","isLink","href","descriptionProps","isFocusVisible","$af383d3bef1cfdc9$export$c3f9f39876e4bc7","heading","ariaLabel","headingId","headingProps","groupProps"],"sources":["/Users/bellacristsantos/Downloads/codeworks/luster/luster/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/index.ts","/Users/bellacristsantos/Downloads/codeworks/luster/luster/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useListBox.ts","/Users/bellacristsantos/Downloads/codeworks/luster/luster/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/utils.ts","/Users/bellacristsantos/Downloads/codeworks/luster/luster/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useOption.ts","/Users/bellacristsantos/Downloads/codeworks/luster/luster/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useListBoxSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useListBox} from './useListBox';\nexport {useOption} from './useOption';\nexport {useListBoxSection} from './useListBoxSection';\nexport {listData, getItemId} from './utils';\n\nexport type {AriaListBoxProps} from '@react-types/listbox';\nexport type {AriaListBoxOptions, ListBoxAria} from './useListBox';\nexport type {AriaOptionProps, OptionAria} from './useOption';\nexport type {AriaListBoxSectionProps, ListBoxSectionAria} from './useListBoxSection';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {RefObject} from 'react';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'override'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  // Use props instead of state here. We don't want this to change due to long press.\n  let selectionBehavior = props.selectionBehavior || 'toggle';\n  let linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');\n  if (selectionBehavior === 'toggle' && linkBehavior === 'action') {\n    // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = 'override';\n  }\n\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    linkBehavior\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean,\n  onAction?: (key: Key) => void,\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, Key} from '@react-types/shared';\nimport {filterDOMProps, isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {ListState} from '@react-stately/list';\nimport {RefObject} from 'react';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface OptionAria extends SelectableItemStates {\n  /** Props for the option element. */\n  optionProps: DOMAttributes,\n\n  /** Props for the main text element inside the option. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n\n  /** Whether the option is keyboard focused. */\n  isFocusVisible: boolean\n}\n\nexport interface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<FocusableElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data?.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data?.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data?.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data?.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled || undefined,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  let item = state.collection.getItem(key);\n  if (isVirtualized) {\n    let index = Number(item?.index);\n    optionProps['aria-posinset'] = Number.isNaN(index) ? undefined : index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed, isFocused, hasAction, allowsSelection} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled,\n    onAction: data?.onAction ? () => data?.onAction?.(key) : undefined,\n    linkBehavior: data?.linkBehavior\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  let domProps = filterDOMProps(item?.props, {isLink: !!item?.props?.href});\n  delete domProps.id;\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(domProps, itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isFocusVisible: isFocused && isFocusVisible(),\n    isSelected,\n    isDisabled,\n    isPressed,\n    allowsSelection,\n    hasAction\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\nexport interface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: DOMAttributes,\n\n  /** Props for the heading element, if any. */\n  headingProps: DOMAttributes,\n\n  /** Props for the group element. */\n  groupProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, using role=\"presentation\",\n      // and only use it as a visual label for the nested group.\n      id: headingId,\n      role: 'presentation'\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}