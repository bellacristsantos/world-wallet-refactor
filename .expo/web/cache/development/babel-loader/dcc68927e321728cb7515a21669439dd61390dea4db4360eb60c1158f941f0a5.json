{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nfunction _callSuper(_this, derived, args) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n      return !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    } catch (e) {\n      return false;\n    }\n  }\n  derived = _getPrototypeOf(derived);\n  return _possibleConstructorReturn(_this, isNativeReflectConstruct() ? Reflect.construct(derived, args || [], _getPrototypeOf(_this).constructor) : derived.apply(_this, args));\n}\nexport var CodedError = function (_Error) {\n  _inherits(CodedError, _Error);\n  function CodedError(code, message) {\n    var _this;\n    _classCallCheck(this, CodedError);\n    _this = _callSuper(this, CodedError, [message]);\n    _this.code = code;\n    return _this;\n  }\n  return _createClass(CodedError);\n}(_wrapNativeSuper(Error));","map":{"version":3,"names":["CodedError","_Error","_inherits","code","message","_this","_classCallCheck","_callSuper","_createClass","_wrapNativeSuper","Error"],"sources":["/Users/bellacristsantos/Downloads/codeworks/luster/luster/node_modules/expo-modules-core/src/errors/CodedError.ts"],"sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA,WAAaA,UAAW,aAAAC,MAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAItB,SAAAD,WAAYG,IAAY,EAAEC,OAAe;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAN,UAAA;IACvCK,KAAA,GAAAE,UAAA,OAAAP,UAAA,GAAMI,OAAO;IACbC,KAAA,CAAKF,IAAI,GAAGA,IAAI;IAAC,OAAAE,KAAA;EACnB;EAAC,OAAAG,YAAA,CAAAR,UAAA;AAAA,EAAAS,gBAAA,CAP6BC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}