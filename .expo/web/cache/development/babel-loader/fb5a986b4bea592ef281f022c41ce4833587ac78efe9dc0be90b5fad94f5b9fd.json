{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { reverseGeocodeAsync } from 'expo-location';\nexport function getAddressLocation(_x) {\n  return _getAddressLocation.apply(this, arguments);\n}\nfunction _getAddressLocation() {\n  _getAddressLocation = _asyncToGenerator(function* (_ref) {\n    var latitude = _ref.latitude,\n      longitude = _ref.longitude;\n    try {\n      var _addressResponse$, _addressResponse$2, _addressResponse$3;\n      var locationObject = {\n        latitude: latitude,\n        longitude: longitude,\n        altitude: 0,\n        accuracy: 0,\n        altitudeAccuracy: 0,\n        heading: 0,\n        speed: 0\n      };\n      var addressResponse = yield reverseGeocodeAsync(locationObject);\n      var city = ((_addressResponse$ = addressResponse[0]) == null ? void 0 : _addressResponse$.city) || ((_addressResponse$2 = addressResponse[0]) == null ? void 0 : _addressResponse$2.subregion);\n      var country = (_addressResponse$3 = addressResponse[0]) == null ? void 0 : _addressResponse$3.country;\n      var formattedLocation = city ? `${city}, ${country}` : country;\n      return formattedLocation;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  });\n  return _getAddressLocation.apply(this, arguments);\n}","map":{"version":3,"names":["reverseGeocodeAsync","getAddressLocation","_x","_getAddressLocation","apply","arguments","_asyncToGenerator","_ref","latitude","longitude","_addressResponse$","_addressResponse$2","_addressResponse$3","locationObject","altitude","accuracy","altitudeAccuracy","heading","speed","addressResponse","city","subregion","country","formattedLocation","error","console","log"],"sources":["/Users/bellacristsantos/Downloads/codeworks/luster/luster/src/utils/getAddressLocation.ts"],"sourcesContent":["import { reverseGeocodeAsync, LocationObjectCoords } from 'expo-location';\n\nexport async function getAddressLocation({\n  latitude,\n  longitude,\n}: { latitude: number; longitude: number }): Promise<string | null> {\n  try {\n\n    const locationObject: LocationObjectCoords = {\n      latitude,\n      longitude,\n      altitude: 0,\n      accuracy: 0,\n      altitudeAccuracy: 0,\n      heading: 0,\n      speed: 0,\n    };\n\n    const addressResponse = await reverseGeocodeAsync(locationObject);\n\n    const city = addressResponse[0]?.city || addressResponse[0]?.subregion;\n    const country = addressResponse[0]?.country;\n\n    const formattedLocation = city ? `${city}, ${country}` : country;\n\n    return formattedLocation;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n"],"mappings":";AAAA,SAASA,mBAAmB,QAA8B,eAAe;AAEzE,gBAAsBC,kBAAkBA,CAAAC,EAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA4BvC,SAAAF,oBAAA;EAAAA,mBAAA,GAAAG,iBAAA,CA5BM,WAAAC,IAAA,EAG6D;IAAA,IAFlEC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;MACRC,SAAS,GAAAF,IAAA,CAATE,SAAS;IAET,IAAI;MAAA,IAAAC,iBAAA,EAAAC,kBAAA,EAAAC,kBAAA;MAEF,IAAMC,cAAoC,GAAG;QAC3CL,QAAQ,EAARA,QAAQ;QACRC,SAAS,EAATA,SAAS;QACTK,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE,CAAC;QACXC,gBAAgB,EAAE,CAAC;QACnBC,OAAO,EAAE,CAAC;QACVC,KAAK,EAAE;MACT,CAAC;MAED,IAAMC,eAAe,SAASnB,mBAAmB,CAACa,cAAc,CAAC;MAEjE,IAAMO,IAAI,GAAG,EAAAV,iBAAA,GAAAS,eAAe,CAAC,CAAC,CAAC,qBAAlBT,iBAAA,CAAoBU,IAAI,OAAAT,kBAAA,GAAIQ,eAAe,CAAC,CAAC,CAAC,qBAAlBR,kBAAA,CAAoBU,SAAS;MACtE,IAAMC,OAAO,IAAAV,kBAAA,GAAGO,eAAe,CAAC,CAAC,CAAC,qBAAlBP,kBAAA,CAAoBU,OAAO;MAE3C,IAAMC,iBAAiB,GAAGH,IAAI,GAAI,GAAEA,IAAK,KAAIE,OAAQ,EAAC,GAAGA,OAAO;MAEhE,OAAOC,iBAAiB;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAO,IAAI;IACb;EACF,CAAC;EAAA,OAAArB,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}